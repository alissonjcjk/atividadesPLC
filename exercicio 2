package barbearia;
import java.util.*;
import java.util.Scanner;

public class barbeiroDorminhoco {
	String nCadeiras[];
	int clientes;
	boolean ocupou  = false;
	boolean desocupou = false;
	boolean dormir = false;
	int cont = 0;
	
	//cada cadeira é representada por uma posicao do vetor, caso esteja 1 é ocupada, 0 não ocupada
	barbeiroDorminhoco(int n, int nClientes) {
		nCadeiras = new String[n];
		clientes = nClientes;
		for(int i=0;i<n;i++) {
			nCadeiras[i] = null;
		}
		Thread threadParaBarbeiro = new Thread(()->{
			barbeiro();			
		});
		threadParaBarbeiro.start();
		
		Thread threadParaClientes = new Thread(()->{
			clientes();			
		});
		threadParaClientes.start();
		
	}
	
	
	
	private void barbeiro(){
		Thread Barbeiro = new Thread(()->{
			System.out.println("barbeiro iniciando os trabalhos");
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			synchronized (this) {
				while(true) {
					if(dormir) {
						System.out.println("barbeiro dormindo");
						while(dormir) {
							try {
								Thread.sleep(100);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
						}
					}
					
					desocupou = false;
					
					for(int i=0;i<nCadeiras.length;i++) {
						if(nCadeiras[i] != null) {
							desocupou = true;
							System.out.println("barbeiro atendendo "+nCadeiras[i]);
							nCadeiras[i] = null;
							try {
								Thread.sleep(2000);
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
							System.out.println("cadeira "+i+" desocupada");
						}
						
					}
					if(!desocupou) {//se nao desocupou é porque nao tem ninguem para atender
						dormir = true;
					}
				}
				
			}
		});
		Barbeiro.start();
		
	}
	
	private synchronized void clientes() {
		int idCliente = 0;
		while(clientes > 0) {
			idCliente++;
			Thread Clientes = new Thread(()-> {
				ocupou = false;
				
	                for (int i=0;i<nCadeiras.length;i++) {
	                    if (nCadeiras[i] == null) {
	                        nCadeiras[i] = Thread.currentThread().getName();
	                        System.out.println("cadeira " + i + " ocupada pelo cliente " + Thread.currentThread().getName() + " ");
	                        ocupou = true;
	                        break; // ocupou a cadeira, ai sai do for
	                    }
	                }
	                        
	                if(ocupou && dormir) {
	                        	System.out.println("barbeiro acordando");
	                        	dormir = false;
	                        }
	                
	            
			},"cliente "+idCliente);
			
			Clientes.start();
			//aparece um cliente a cada 1 segundo
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			clientes--;
		}
	}
	
	public static void main(String[] args) {
		Scanner leitor = new Scanner(System.in);
		System.out.println("informe a quantidade de cadeiras da barbearia: ");
		int cadeiras = leitor.nextInt();
		System.out.println("informe a quantidade de clientes que irá chegar");
		int clientes = leitor.nextInt();
		barbeiroDorminhoco barbearia = new barbeiroDorminhoco(cadeiras,clientes);
		
		
	}



	
	
	
	
}
